<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hf.core.dao.local.PayRequestDao" >
  <resultMap id="BaseResultMap" type="com.hf.core.model.po.PayRequest" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="out_trade_no" property="outTradeNo" jdbcType="VARCHAR" />
    <result column="body" property="body" jdbcType="VARCHAR" />
    <result column="mch_id" property="mchId" jdbcType="VARCHAR" />
    <result column="sub_openid" property="subOpenid" jdbcType="VARCHAR" />
    <result column="buyer_id" property="buyerId" jdbcType="VARCHAR" />
    <result column="service" property="service" jdbcType="VARCHAR" />
    <result column="appid" property="appid" jdbcType="VARCHAR" />
    <result column="sign" property="sign" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="pay_result" property="payResult" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="version" property="version" jdbcType="INTEGER" />
    <result column="trade_type" property="tradeType" jdbcType="INTEGER" />
    <result column="fee" property="fee" jdbcType="DECIMAL" />
    <result column="actual_amount" property="actualAmount" jdbcType="DECIMAL" />
    <result column="total_fee" property="totalFee" jdbcType="INTEGER" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="channel_provider_code" property="channelProviderCode" jdbcType="VARCHAR" />
    <result column="out_notify_url" property="outNotifyUrl" jdbcType="VARCHAR" />
    <result column="notice_status" property="noticeStatus" jdbcType="INTEGER" />
    <result column="notice_retry_time" property="noticeRetryTime" jdbcType="INTEGER" />
    <result column="create_ip" property="createIp" jdbcType="VARCHAR" />
    <result column="bank_code" property="bankCode" jdbcType="VARCHAR" />
    <result column="iversion" property="iversion" jdbcType="VARCHAR" />
    <result column="front_url" property="frontUrl" jdbcType="VARCHAR" />

  </resultMap>
  <sql id="Base_Column_List" >
    id, out_trade_no, body, mch_id, sub_openid, buyer_id, service, appid, sign, `status`, 
    create_time, update_time, version,trade_type,fee,actual_amount,total_fee,remark,
    channel_provider_code,pay_result,out_notify_url,notice_status,notice_retry_time,create_ip,bank_code,
    iversion,front_url
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from pay_request
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from pay_request
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.hf.core.model.po.PayRequest" >
    insert into pay_request (id, out_trade_no, body, 
      mch_id, sub_openid, buyer_id, 
      service, appid, sign, 
      `status`, create_time, update_time, 
      version)
    values (#{id,jdbcType=BIGINT}, #{outTradeNo,jdbcType=VARCHAR}, #{body,jdbcType=VARCHAR}, 
      #{mchId,jdbcType=VARCHAR}, #{subOpenid,jdbcType=VARCHAR}, #{buyerId,jdbcType=VARCHAR}, 
      #{service,jdbcType=VARCHAR}, #{appid,jdbcType=VARCHAR}, #{sign,jdbcType=VARCHAR}, 
      #{status,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{version,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" useGeneratedKeys="true" keyProperty="id" parameterType="com.hf.core.model.po.PayRequest" >
    insert into pay_request
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="outTradeNo != null" >
        out_trade_no,
      </if>
      <if test="body != null" >
        body,
      </if>
      <if test="mchId != null" >
        mch_id,
      </if>
      <if test="subOpenid != null" >
        sub_openid,
      </if>
      <if test="buyerId != null" >
        buyer_id,
      </if>
      <if test="service != null" >
        service,
      </if>
      <if test="appid != null" >
        appid,
      </if>
      <if test="sign != null" >
        sign,
      </if>
      <if test="status != null" >
        `status`,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="version != null" >
        version,
      </if>
      <if test="tradeType != null" >
        trade_type,
      </if>
      <if test="fee != null" >
        fee,
      </if>
      <if test="actualAmount != null" >
        actual_amount,
      </if>
      <if test="totalFee != null" >
        total_fee,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="channelProviderCode != null" >
        channel_provider_code,
      </if>
      <if test="outNotifyUrl != null" >
        out_notify_url,
      </if>
      <if test="createIp != null" >
        create_ip,
      </if>
      <if test="bankCode != null" >
        bank_code,
      </if>
      <if test="iversion != null" >
        iversion,
      </if>
      <if test="frontUrl != null" >
        front_url,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="outTradeNo != null" >
        #{outTradeNo,jdbcType=VARCHAR},
      </if>
      <if test="body != null" >
        #{body,jdbcType=VARCHAR},
      </if>
      <if test="mchId != null" >
        #{mchId,jdbcType=VARCHAR},
      </if>
      <if test="subOpenid != null" >
        #{subOpenid,jdbcType=VARCHAR},
      </if>
      <if test="buyerId != null" >
        #{buyerId,jdbcType=VARCHAR},
      </if>
      <if test="service != null" >
        #{service,jdbcType=VARCHAR},
      </if>
      <if test="appid != null" >
        #{appid,jdbcType=VARCHAR},
      </if>
      <if test="sign != null" >
        #{sign,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="version != null" >
        #{version,jdbcType=INTEGER},
      </if>
      <if test="tradeType != null" >
        #{tradeType,jdbcType=INTEGER},
      </if>
      <if test="fee != null" >
        #{fee,jdbcType=DECIMAL},
      </if>
      <if test="actualAmount != null" >
        #{actualAmount,jdbcType=DECIMAL},
      </if>
      <if test="totalFee != null" >
        #{totalFee,jdbcType=INTEGER},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="channelProviderCode != null" >
        #{channelProviderCode,jdbcType=VARCHAR},
      </if>
      <if test="outNotifyUrl != null" >
        #{outNotifyUrl,jdbcType=VARCHAR},
      </if>
      <if test="createIp != null" >
        #{createIp,jdbcType=VARCHAR},
      </if>
      <if test="bankCode != null" >
        #{bankCode,jdbcType=VARCHAR},
      </if>
      <if test="iversion != null" >
        #{iversion,jdbcType=VARCHAR},
      </if>
      <if test="frontUrl != null" >
        #{frontUrl,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.hf.core.model.po.PayRequest" >
    update pay_request
    <set >
      <if test="outTradeNo != null" >
        out_trade_no = #{outTradeNo,jdbcType=VARCHAR},
      </if>
      <if test="body != null" >
        body = #{body,jdbcType=VARCHAR},
      </if>
      <if test="mchId != null" >
        mch_id = #{mchId,jdbcType=VARCHAR},
      </if>
      <if test="subOpenid != null" >
        sub_openid = #{subOpenid,jdbcType=VARCHAR},
      </if>
      <if test="buyerId != null" >
        buyer_id = #{buyerId,jdbcType=VARCHAR},
      </if>
      <if test="service != null" >
        service = #{service,jdbcType=VARCHAR},
      </if>
      <if test="appid != null" >
        appid = #{appid,jdbcType=VARCHAR},
      </if>
      <if test="sign != null" >
        sign = #{sign,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        `status` = #{status,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        `pay_result` = #{payResult,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="version != null" >
        version = #{version,jdbcType=INTEGER},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hf.core.model.po.PayRequest" >
    update pay_request
    set out_trade_no = #{outTradeNo,jdbcType=VARCHAR},
      body = #{body,jdbcType=VARCHAR},
      mch_id = #{mchId,jdbcType=VARCHAR},
      sub_openid = #{subOpenid,jdbcType=VARCHAR},
      buyer_id = #{buyerId,jdbcType=VARCHAR},
      service = #{service,jdbcType=VARCHAR},
      appid = #{appid,jdbcType=VARCHAR},
      sign = #{sign,jdbcType=VARCHAR},
      `status` = #{status,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      version = #{version,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="selectByTradeNo" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    from pay_request
    where out_trade_no = #{tradeNo,jdbcType=VARCHAR}
  </select>

  <update id="updateStatusById">
    update pay_request
    set status = #{toStatus,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT} and status = #{fromStatus,jdbcType=INTEGER}
  </update>

  <update id="updateFailed">
    update pay_request
    set status = 98,
    remark = #{remark,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT} and status = #{fromStatus,jdbcType=INTEGER}
  </update>

  <select id="selectUnfinishedList" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from pay_request
    where status in (0,1)  and id > #{currentId,jdbcType=BIGINT} and <![CDATA[ create_time < #{createTime,jdbcType=TIMESTAMP} ]]> order by id
  </select>

  <select id="selectWaitingPromote" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from pay_request
    where status in (10,20) and pay_result=0 order by id
--     and <![CDATA[ DATE_FORMAT(update_time,'yyyy-MM-dd') < CURRENT_DATE ]]> order by id
  </select>

  <select id="select" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from pay_request
    where 1=1
    <if test="outTradeNo != null">
      and out_trade_no like concat(#{outTradeNo,jdbcType=VARCHAR},'%')
    </if>
    <if test="mchId != null">
      and mch_id = #{mchId,jdbcType=VARCHAR}
    </if>
    <if test="service != null">
      and service = #{service,jdbcType=VARCHAR}
    </if>
    <if test="status != null">
      and status = #{status,jdbcType=INTEGER}
    </if>
    <if test="statusList != null and statusList.size()>0">
      and status in
      <foreach item="status" index="index" collection="statusList" open="(" separator="," close=")">
        #{status}
      </foreach>
    </if>
    <if test="notInStatusList != null and notInStatusList.size()>0">
      and status not in
      <foreach item="status" index="index" collection="notInStatusList" open="(" separator="," close=")">
        #{status}
      </foreach>
    </if>
    <if test="type != null">
      and trade_type = #{type,jdbcType=INTEGER}
    </if>
    <if test="mchIds != null and mchIds.size()>0">
      and mch_id in
      <foreach item="item" index="index" collection="mchIds" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
    <if test="startId != null">
      and id >= #{startId,jdbcType=BIGINT}
    </if>
    <if test="lastTime != null">
      and <![CDATA[ create_time < #{lastTime,jdbcType=TIMESTAMP} ]]>
    </if>
    <if test="sortType != null and sortType =='asc'">
      order by id ASC
    </if>
    <if test="sortType == null or sortType =='desc'">
      order by id DESC
    </if>
    limit #{startIndex,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER}
  </select>

  <select id="selectSum" resultType="java.math.BigDecimal">
    select
    sum(t2.amount)
    from pay_request t1,account_opr_log t2
    where 1=1 and t1.out_trade_no = t2.out_trade_no and t2.type = 0
    <if test="outTradeNo != null">
      and t1.out_trade_no like concat(#{outTradeNo,jdbcType=VARCHAR},'%')
    </if>
    <if test="mchId != null">
      and t1.mch_id = #{mchId,jdbcType=VARCHAR}
    </if>
    <if test="service != null">
      and t1.service = #{service,jdbcType=VARCHAR}
    </if>
    <if test="status != null">
      and t1.status = #{status,jdbcType=INTEGER}
    </if>
    <if test="statusList != null and statusList.size()>0">
      and t1.status in
      <foreach item="status" index="index" collection="statusList" open="(" separator="," close=")">
        #{status}
      </foreach>
    </if>
    <if test="notInStatusList != null and notInStatusList.size()>0">
      and t1.status not in
      <foreach item="status" index="index" collection="notInStatusList" open="(" separator="," close=")">
        #{status}
      </foreach>
    </if>
    <if test="type != null">
      and t1.trade_type = #{type,jdbcType=INTEGER}
    </if>
    <if test="mchIds != null and mchIds.size()>0">
      and t1.mch_id in
      <foreach item="item" index="index" collection="mchIds" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
    <if test="startId != null">
      and t1.id >= #{startId,jdbcType=BIGINT}
    </if>
    <if test="lastTime != null">
      and <![CDATA[ t1.create_time < #{lastTime,jdbcType=TIMESTAMP} ]]>
    </if>
    <if test="oprGroupId != null">
      and t2.group_id = #{oprGroupId,jdbcType=BIGINT}
    </if>
    <if test="oprGroupIds != null and oprGroupIds.size()>0">
      and t2.group_id in
      <foreach item="item" index="index" collection="oprGroupIds" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
  </select>


  <select id="selectStatistics" resultType="com.hf.base.model.TradeStatisticsRequestDto">
      SELECT
          date_format(log.create_time,'%Y-%m-%d') as "createTime",
          SUM(log.amount)  as "amoun",
          t2.group_no as "groupNo",
          t2.name as "name",
          t1.service  as "service"
         <if test="admin == 0">
          ,
          t1.channel_provider_code as "channelProviderCode"
         </if>
      FROM
          account_opr_log log
      LEFT JOIN
          pay_request t1
      ON
          log.out_trade_no = t1.out_trade_no
      LEFT JOIN
          user_group t2
      ON
          log.group_id = t2.id
      WHERE
          log.status = 10
          and log.type = 0
          and t2.id != 1
          <if test="groupNo != null">
            and t2.group_no = #{groupNo,jdbcType=VARCHAR}
          </if>
          <if test="createTime != null">
            and log.create_time >= #{createTime,jdbcType=VARCHAR}
          </if>
          <if test="createTime2 != null">
            and <![CDATA[ log.create_time < #{createTime2,jdbcType=VARCHAR} ]]>
          </if>
          <if test="groupIds != null and groupIds.size()>0">
            and log.group_id not in
            <foreach item="groupId" index="index" collection="groupIds" open="(" separator="," close=")">
              #{groupId}
            </foreach>
          </if>
      GROUP BY
          date_format(log.create_time,'%Y-%m-%d'),
          t2.group_no,
          t2.name,
          t1.service
          <if test="admin == 0">
          ,
          t1.channel_provider_code
          </if>
          order by createTime desc
      limit #{startIndex,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER}
  </select>

  <select id="selectStatisticsCount" resultType="java.lang.Integer">

    SELECT count(*) FROM (
      select
        1
      from
        account_opr_log log
      LEFT JOIN
        pay_request t1
      ON
        log.out_trade_no = t1.out_trade_no
      LEFT JOIN
        user_group t2
      ON
        log.group_id = t2.id
      WHERE
        log.status = 10
        and log.type = 0
        and t2.id != 1
        <if test="groupNo != null">
          and t2.group_no = #{groupNo,jdbcType=VARCHAR}
        </if>
        <if test="createTime != null">
          and log.create_time >= #{createTime,jdbcType=VARCHAR}
        </if>
        <if test="createTime2 != null">
          and <![CDATA[ log.create_time < #{createTime2,jdbcType=VARCHAR} ]]>
        </if>
        <if test="groupIds != null and groupIds.size()>0">
          and log.group_id not in
          <foreach item="groupId" index="index" collection="groupIds" open="(" separator="," close=")">
            #{groupId}
          </foreach>
        </if>
      GROUP BY
        date_format(log.create_time,'%Y-%m-%d'),
        t2.group_no,
        t2.name,
        t1.service
        <if test="admin == 0">
        ,
        t1.channel_provider_code
        </if>
    )a

  </select>

  <select id="selectUserStatistics" resultType="java.util.HashMap">
    select sum(t1.amount) as 'amount',
           t1.group_id as 'groupId',
           t3.group_no as 'groupNo',
           t3.name as 'name',
           t2.service as 'service'
    from account_opr_log t1
    left join pay_request t2 on t1.out_trade_no = t2.out_trade_no
    left join user_group t3 on t1.group_id = t3.id
    where t1.type = 0 and t1.status = 10
    <if test="groupNo != null">
      and t3.group_no = #{groupNo,jdbcType=VARCHAR}
    </if>
    <if test="groupId != null">
      and t3.id = #{groupId,jdbcType=BIGINT}
    </if>
    <if test="createTime != null">
      and t1.create_time >= #{createTime,jdbcType=VARCHAR}
    </if>
    <if test="createTime2 != null">
      and <![CDATA[ t1.create_time < #{createTime2,jdbcType=VARCHAR} ]]>
    </if>
    <if test="groupIds != null and groupIds.size()>0">
      and t1.group_id in
      <foreach item="groupId" index="index" collection="groupIds" open="(" separator="," close=")">
        #{groupId}
      </foreach>
    </if>
    group by t1.group_id,t3.group_no,t3.name,t2.service
  </select>

  <select id="selectCount" resultType="java.lang.Integer">
    select count(1) from pay_request where 1=1
    <if test="outTradeNo != null">
      and out_trade_no = #{outTradeNo,jdbcType=VARCHAR}
    </if>
    <if test="mchId != null">
      and mch_id = #{mchId,jdbcType=VARCHAR}
    </if>
    <if test="service != null">
      and service = #{service,jdbcType=BIGINT}
    </if>
    <if test="status != null">
      and status = #{status,jdbcType=INTEGER}
    </if>
    <if test="type != null">
      and trade_type = #{type,jdbcType=INTEGER}
    </if>
    <if test="mchIds != null and mchIds.size()>0">
      and mch_id in
      <foreach item="item" index="index" collection="mchIds" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
  </select>

  <update id="updatePayResult">
    update pay_request
    set pay_result = #{payResult,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT} and version = #{version,jdbcType=INTEGER}
  </update>

  <update id="updateActualAmount">
    update pay_request
    set
      actual_amount = #{actualAmount,jdbcType=VARCHAR},
      fee = #{fee,jdbcType=VARCHAR},
      version = version+1
    where id = #{id,jdbcType=BIGINT} and version = #{version,jdbcType=INTEGER}
  </update>

  <update id="updateNoticeStatus">
    update pay_request
    set
    notice_status = 1
    where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="updateNoticeRetryTime">
    update pay_request
    set
    notice_retry_time = notice_retry_time+1
    where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="selectByTradeNos" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from pay_request
    where 1=1
    <if test="outTradeNos != null and outTradeNos.size()>0">
      and out_trade_no in
      <foreach item="item" index="index" collection="outTradeNo" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
  </select>

  <select id="sumByProvider" resultType="java.util.Map">
    select
    sum(total_fee) as "total",
    channel_provider_code as "providerCode",
    mch_id as "mchId"
    from pay_request where status = 100 group by channel_provider_code,mch_id
  </select>
</mapper>